[{"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/index.tsx":"1","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/wokers/k-means.ts":"2","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/components/Loader/index.tsx":"3","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/helpers/drawImageArray.ts":"4","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/StyledApp.ts":"5","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/App.tsx":"6","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/components/styled/Button.ts":"7","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/reportWebVitals.ts":"8"},{"size":505,"mtime":1608583393347,"results":"9","hashOfConfig":"10"},{"size":2069,"mtime":1609532661616,"results":"11","hashOfConfig":"10"},{"size":113,"mtime":1608584098989,"results":"12","hashOfConfig":"10"},{"size":361,"mtime":1608583355047,"results":"13","hashOfConfig":"10"},{"size":462,"mtime":1614904254384,"results":"14","hashOfConfig":"10"},{"size":3362,"mtime":1614904378358,"results":"15","hashOfConfig":"10"},{"size":86,"mtime":1608584914227,"results":"16","hashOfConfig":"10"},{"size":416,"mtime":1608585140335,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bdxbo9",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/index.tsx",[],"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/wokers/k-means.ts",["37"],"import workerpool from 'workerpool'\n\nimport { PixelVector, Centroid } from 'types/vector'\n\nfunction kmeans(pixels: number[], numberOfCentroids: number): PixelVector[] {\n  console.log('Running k-means. Number of centroids: ', numberOfCentroids)\n\n  const ITERATIONS = 50\n\n  // @TODO: Find out how to move this into it's own file and regiter it here.\n  function indexOfMin(arr: number[]) {\n    if (arr.length === 0) {\n      return -1\n    }\n\n    let max = arr[0]\n    let maxIndex = 0\n\n    for (let i = 1; i < arr.length; i++) {\n      if (arr[i] < max) {\n        maxIndex = i\n        max = arr[i]\n      }\n    }\n\n    return maxIndex\n  }\n\n  const rgbPixels: PixelVector[] = []\n  const centroids: Centroid[] = []\n\n  for (let i = 0; i < pixels.length; i += 4) {\n    const red = pixels[i]\n    const green = pixels[i + 1]\n    const blue = pixels[i + 2]\n    // const alpha = pixels[i + 3]\n\n    const vector: PixelVector = {\n      x: red,\n      y: green,\n      z: blue,\n    }\n\n    rgbPixels.push(vector)\n  }\n\n  // place centoroids randomly\n  for (let i = 0; i < numberOfCentroids; i++) {\n    const red = Math.floor(Math.random() * 255)\n    const green = Math.floor(Math.random() * 255)\n    const blue = Math.floor(Math.random() * 255)\n\n    const centroid: Centroid = { x: red, y: green, z: blue, children: [] }\n    centroids.push(centroid)\n  }\n\n  // Initial assignment\n\n  rgbPixels.forEach((pixel) => {\n    const { x: pRed, y: pGreen, z: pBlue } = pixel\n\n    const deltas: number[] = []\n\n    centroids.forEach((centroid) => {\n      const { x: cRed, y: cGreen, z: cBlue } = centroid\n\n      const delta = Math.abs(pRed - cRed) + Math.abs(pGreen - cGreen) + Math.abs(pBlue - cBlue)\n      deltas.push(delta)\n    })\n    // asign pixel to a centroid\n    const cIndex = indexOfMin(deltas)\n    const centroid = centroids[cIndex]\n    pixel.centroid = centroid\n    centroid.children.push(pixel)\n  })\n\n  return rgbPixels\n}\n\nfunction wrapper(pixels: number[], centroids: number): any {\n  const pool = workerpool.pool()\n\n  return pool.exec(kmeans, [pixels, centroids])\n}\n\nexport default wrapper\n","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/components/Loader/index.tsx",[],"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/helpers/drawImageArray.ts",[],"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/StyledApp.ts",[],"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/App.tsx",["38","39","40"],"import { useState, useRef, useEffect } from 'react'\nimport classNames from 'classnames'\n\nimport Loader from 'components/Loader'\nimport Button from './components/styled/Button'\n\nimport StyledApp from './StyledApp'\n\nimport Matrix from './assets/images/matrix.jpg'\n\nimport rgbToHex from './helpers/rgbToHex'\nimport drawImageArray from './helpers/drawImageArray'\n\nimport kmeans from './wokers/k-means'\nimport { PixelVector } from 'types/vector'\n\nconst App: React.FC = () => {\n  const [centroids, setCentroids] = useState(3)\n  const [loading, setLoading] = useState(false)\n  const [size, setSize] = useState({\n    width: 500,\n    height: 300,\n  })\n  const [hasReducedOnce, setHasReducedOnce] = useState(false)\n  const canvasRef: any = useRef()\n  const imageRef: any = useRef()\n\n  const reduce = async () => {\n    if (!hasReducedOnce) setHasReducedOnce(true)\n    setLoading(true)\n    const canvas: any = canvasRef.current\n    const internalCanvas: any = document.createElement('canvas')\n\n    const canvasAndImageExists = canvas && imageRef.current\n\n    if (canvasAndImageExists) {\n      const context = canvas.getContext('2d')\n      const canvasHeight = canvas.height\n      const canvasWidth = canvas.width\n\n      // context.drawImage(imageRef.current, 0, 0);\n      const internalContext = internalCanvas.getContext('2d')\n      internalCanvas.width = canvasWidth\n      internalCanvas.height = canvasHeight\n\n      internalContext.drawImage(imageRef.current, 0, 0, canvasWidth, canvasHeight)\n\n      const imgData = internalContext.getImageData(0, 0, canvasWidth, canvasHeight)\n      const { data } = imgData\n\n      const predictedPixels: PixelVector[] = await kmeans(data, centroids)\n      setLoading(false)\n\n      const newImage: number[] = []\n\n      predictedPixels.forEach((pixel) => {\n        const { x: red, y: green, z: blue } = pixel.centroid!\n        newImage.push(red)\n        newImage.push(green)\n        newImage.push(blue)\n        newImage.push(255) // alpha\n      })\n\n      drawImageArray(context, newImage, canvasWidth, canvasHeight)\n    }\n  }\n\n  const onFileUpload = (event: any) => {\n    const [file] = event.target.files\n    const image = new Image()\n    image.src = URL.createObjectURL(file)\n    image.onload = () => {\n      console.log(image.width, image.height)\n      imageRef.current = image\n      setSize({\n        width: image.width,\n        height: image.height,\n      })\n    }\n    // console.log(image)\n    // console.log(imageRef.current)\n  }\n\n  return (\n    <StyledApp>\n      <div className=\"content\">\n        <h1>Image reducer</h1>\n        {/* <img style={{ display: 'none' }} src={Matrix} alt=\"Matrix\" ref={(el) => (imageRef.current = el)} /> */}\n        <div className=\"file-upload-container\">\n          <input type=\"file\" id=\"single\" onChange={onFileUpload} />\n        </div>\n        <div className=\"inputs\">\n          <Button onClick={reduce}>Reduce image</Button>\n          <label>Centroids {centroids}</label>\n          <input type=\"number\" onChange={(event: any) => setCentroids(event.target.value)} />\n        </div>\n        {loading && <Loader />}\n        <canvas\n          width={size.width}\n          height={size.height}\n          id=\"canvas\"\n          className={classNames({ hidden: !hasReducedOnce || loading })}\n          ref={(c) => (canvasRef.current = c)}\n        />\n      </div>\n    </StyledApp>\n  )\n}\n\nexport default App\n","/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/components/styled/Button.ts",[],"/Users/maximilianlloyd/Developer/Experiments/image-reducer/src/reportWebVitals.ts",["41"],"import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n",{"ruleId":"42","severity":1,"message":"43","line":8,"column":9,"nodeType":"44","messageId":"45","endLine":8,"endColumn":19},{"ruleId":"42","severity":1,"message":"46","line":1,"column":28,"nodeType":"44","messageId":"45","endLine":1,"endColumn":37},{"ruleId":"42","severity":1,"message":"47","line":9,"column":8,"nodeType":"44","messageId":"45","endLine":9,"endColumn":14},{"ruleId":"42","severity":1,"message":"48","line":11,"column":8,"nodeType":"44","messageId":"45","endLine":11,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":3,"column":25,"nodeType":"51","messageId":"52","endLine":3,"endColumn":57},"@typescript-eslint/no-unused-vars","'ITERATIONS' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Matrix' is defined but never used.","'rgbToHex' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]